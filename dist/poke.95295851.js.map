{"version":3,"sources":["JavaScript/Selectors.js","JavaScript/pokeBenchState.js","JavaScript/pokeInfoText.js","JavaScript/PokemonBluePrint.js","JavaScript/PokemonForScreen.js","JavaScript/xmlRequest.js","JavaScript/pokeUtils.js","JavaScript/Landscape/lanscapeState.js","JavaScript/Landscape/insideLandscapeHandlers.js","JavaScript/dragAndDropHandlers.js","JavaScript/printPokemon.js","JavaScript/eventListenersInitializer.js","poke.js"],"names":["CajaSeleccionaPokemon","document","querySelector","body","btn","landscape","imagesSvg","require","blackDiv","searchPokemon","bench","bluePrint","JSON","parse","localStorage","getItem","onScreen","textToBlackDiv","text","innerHTML","PokemonBluePrint","constructor","pokemon","name","pokemonName","id","pokemonIdNumber","sprites","pokemonSprites","excludeEmptySprites","actualSprite","pokemonSpritesObject","filteredSpritesList","Object","entries","filter","spriteUrl","reduce","spritesList","spriteId","switchSpriteCaracteristic","colorOrSex","actualPrimaryCaracteristic","actualSecondaryCaracteristic","toModify","includes","toPreserve","options","replace","default","optionsVariation","PokemonForScreen","uniqueId","state","isPrinted","logFunction","htmlButtonIfNeeded","buttonName","buttons","rotate","sex","back_default","front_female","createPokemonHtml","pokemonHtml","addButtonListeners","pokemonContainer","querySelectorAll","forEach","button","addEventListener","pokemonAction","e","pokemonButton","target","parentElement","pokemonObjectRef","actions","switchSex","color","switchColor","bye","remove","console","log","classList","actionFunc","printSelf","error","add","updateSprite","newSpriteKey","sprite","src","newSprite","actualPosition","Options","front","back","getPokemonFromApi","pokemonId","Promise","resolve","reject","xml","XMLHttpRequest","onload","eventObject","currentTarget","response","status","open","responseType","send","getPokemonBluePrintReference","pokemonIdOrName","getRandomPokemonNumber","randomPokemonId","Math","floor","random","landscapeState","myClick","clickTarget","undefined","offset","mouseIsAlive","style","left","clientX","x","top","clientY","y","landscapeDndActivate","dataset","notEmpty","mouseUp","bigRect","getBoundingClientRect","obj","objOffset","objRect","right","width","bottom","height","mouseDown","tagName","offsetX","offsetY","pokemonInside","margin","position","setAttribute","dragStart","dragEnd","dragOver","preventDefault","dragEnter","onDrop","pokemonDropped","append","mouseIn","mouseOut","isFirsTimePokemonRequest","some","createNewUniqueIdentifier","Date","getTime","createPrintableCopy","pokemonBluePrint","newUniqueIdentifier","UpdateLocalStorage","bluePrintReference","setItem","stringify","createPokemonBlueprint","then","apiPokemonData","catch","Error","addPokemonDivListeners","div","printPokemon","blueprint","printableCopy","insertAdjacentHTML","newPokemonDiv","test","firstElementChild","testClick","input","item","value","pokemonIdAuth","isNaN","parseInt","init"],"mappings":"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","file":"poke.95295851.js","sourceRoot":"..","sourcesContent":["const CajaSeleccionaPokemon = document.querySelector('.pokeContainer');\n\nconst body = document.querySelector('body');\n\nconst btn = document.querySelector('[name=accion]');\n\nconst landscape = document.querySelector('.landscapeContainer');\n\nconst imagesSvg = require('../images/buttons/*.svg');\n\nconst blackDiv = document.querySelector('#infoTextContainer');\n\nconst searchPokemon = document.querySelector('#buscarPokemon');\n\nexport {\n  CajaSeleccionaPokemon,\n  btn,\n  landscape,\n  body,\n  imagesSvg,\n  blackDiv,\n  searchPokemon,\n};\n","// const bench = JSON.parse(localStorage.getItem('professorStorage')) || {};\nexport const bench = {\n  bluePrint: JSON.parse(localStorage.getItem('professorStorage')) || {},\n  onScreen: {},\n};\n","import { blackDiv } from './Selectors';\n\nexport default function textToBlackDiv(text) {\n  blackDiv.innerHTML = `<p>${text}</p>`;\n}\n","export default class PokemonBluePrint {\n  constructor(pokemon) {\n    const {\n      name: pokemonName,\n      id: pokemonIdNumber,\n      sprites: pokemonSprites,\n    } = pokemon;\n\n    this.name = pokemonName;\n    this.id = pokemonIdNumber;\n    this.sprites = PokemonBluePrint.excludeEmptySprites(pokemonSprites);\n    this.actualSprite = 'front_default';\n  }\n\n  static excludeEmptySprites(pokemonSpritesObject) {\n    const filteredSpritesList = Object.entries(pokemonSpritesObject)\n      .filter(([, spriteUrl]) => spriteUrl)\n      .reduce((spritesList, [spriteId, spriteUrl]) => {\n        spritesList[spriteId] = spriteUrl;\n        return spritesList;\n      }, {});\n    return filteredSpritesList;\n  }\n\n  static switchSpriteCaracteristic(actualSprite, colorOrSex = 'color') {\n    // this function switch the text between color or sex of pokemon sprite name.\n    const actualPrimaryCaracteristic =\n      colorOrSex === 'color' ? 'shiny' : 'female';\n\n    const actualSecondaryCaracteristic =\n      actualPrimaryCaracteristic === 'shiny' ? 'female' : 'shiny';\n\n    const toModify = actualSprite.includes(actualPrimaryCaracteristic)\n      ? actualPrimaryCaracteristic\n      : 'default';\n\n    const toPreserve = actualSprite.includes(actualSecondaryCaracteristic)\n      ? actualSecondaryCaracteristic\n      : 'default';\n\n    const options = {};\n    options[actualPrimaryCaracteristic] = function() {\n      return actualSprite.replace('shiny_female', actualSecondaryCaracteristic);\n    };\n    options.default = function() {\n      return actualSprite.replace(actualSecondaryCaracteristic, 'shiny_female');\n    };\n\n    const optionsVariation = {};\n    optionsVariation[actualPrimaryCaracteristic] = function() {\n      return actualSprite.replace(actualPrimaryCaracteristic, 'default');\n    };\n    optionsVariation.default = function() {\n      return actualSprite.replace('default', actualPrimaryCaracteristic);\n    };\n\n    return toPreserve === actualSecondaryCaracteristic\n      ? options[toModify]()\n      : optionsVariation[toModify]();\n  }\n}\n","import PokemonBluePrint from './PokemonBluePrint';\nimport { imagesSvg } from './Selectors';\nimport { bench } from './pokeBenchState';\nimport textToBlackDiv from './pokeInfoText';\n\nexport default class PokemonForScreen extends PokemonBluePrint {\n  constructor(pokemon, uniqueId) {\n    super(pokemon);\n    this.uniqueId = uniqueId;\n    this.state = {\n      isPrinted: false,\n      logFunction: textToBlackDiv,\n    };\n  }\n\n  static htmlButtonIfNeeded(sprites, buttonName) {\n    const buttons = {\n      rotate: `<button draggable=\"false\" class=\"rotate oculto\">\n        <img class=\"icon\" src=${imagesSvg['003-brujula']} alt=\"trash\">\n        </button>`,\n      sex: `<button class=\"sex oculto\">\n        <img class=\"icon\" src=${imagesSvg['002-lucha']} alt=\"trash\">\n      </button>`,\n    };\n    return (sprites.back_default && buttonName === 'rotate') ||\n      (sprites.front_female && buttonName === 'sex')\n      ? buttons[buttonName]\n      : '';\n  }\n\n  static createPokemonHtml(pokemon) {\n    const { sprites, actualSprite, uniqueId } = pokemon;\n    const pokemonHtml = `\n         <img id=${`spriteFor_${uniqueId}`} \n         draggable=\"false\" src=\"${sprites[actualSprite]}\">\n         <button draggable=\"false\" class=\"bye oculto\">\n           <img class=\"icon\" src=${\n             imagesSvg['008-tacho-de-reciclaje']\n           } alt=\"trash\">\n         </button>\n         ${PokemonForScreen.htmlButtonIfNeeded(sprites, 'rotate')} \n         ${PokemonForScreen.htmlButtonIfNeeded(sprites, 'sex')} \n         <button draggable=\"false\" class=\"color oculto\">\n            <img class=\"icon\" src=${imagesSvg.pokemon} alt=\"trash\">\n         </button>\n    \n      \n      `;\n    return pokemonHtml;\n  }\n\n  static addButtonListeners(pokemonContainer) {\n    const buttons = pokemonContainer.querySelectorAll('button');\n    buttons.forEach(button =>\n      button.addEventListener('click', PokemonForScreen.pokemonAction)\n    );\n  }\n\n  static pokemonAction(e) {\n    const pokemonButton = e.target;\n    const { id } = pokemonButton.parentElement;\n    const pokemonObjectRef = bench.onScreen[id];\n\n    const actions = {\n      sex: () => pokemonObjectRef.switchSex(),\n      color: () => pokemonObjectRef.switchColor(),\n      rotate: () => pokemonObjectRef.rotate(),\n      bye: () => pokemonButton.parentElement.remove(),\n      default: () => console.log(pokemonButton.classList[0]),\n    };\n\n    const actionFunc = actions[this.classList[0]] || actions.default;\n\n    return actionFunc();\n  }\n\n  printSelf(pokemonContainer) {\n    if (this.state.isPrinted) {\n      const error = {\n        error:\n          'this pokemon is already on screen, you should create a new copy from Blueprint',\n      };\n      throw error;\n    }\n    pokemonContainer.id = this.uniqueId;\n    pokemonContainer.classList.add(this.name);\n    const pokemonHtml = PokemonForScreen.createPokemonHtml(this);\n    pokemonContainer.innerHTML = pokemonHtml;\n    PokemonForScreen.addButtonListeners(pokemonContainer);\n    if (pokemonContainer) this.state.isPrinted = true;\n    console.log(bench);\n  }\n\n  updateSprite(newSpriteKey) {\n    if (!this.sprites[newSpriteKey]) {\n      const error = {\n        error: `this Sprite don't Exist`,\n      };\n      throw error;\n    }\n    if (this.state.isPrinted) {\n      const sprite = document.querySelector(`#spriteFor_${this.uniqueId}`);\n      sprite.src = this.sprites[newSpriteKey] || sprite.src;\n      this.actualSprite = newSpriteKey || this.actualSprite;\n    }\n  }\n\n  switchColor() {\n    const newSprite = PokemonBluePrint.switchSpriteCaracteristic(\n      this.actualSprite\n    );\n    this.updateSprite(newSprite);\n    this.state.logFunction(\n      `<strong>${this.name}</strong> switch into a new <strong>color</strong>`\n    );\n  }\n\n  switchSex() {\n    const newSprite = PokemonBluePrint.switchSpriteCaracteristic(\n      this.actualSprite,\n      'sex'\n    );\n    this.updateSprite(newSprite);\n    this.state.logFunction(\n      `<strong>${this.name}</strong> switch into a new <strong>variation</strong>`\n    );\n  }\n\n  rotate() {\n    const actualPosition = this.actualSprite.includes('front')\n      ? 'front'\n      : 'back';\n    const Options = {\n      front: () => this.actualSprite.replace('front', 'back'),\n      back: () => this.actualSprite.replace('back', 'front'),\n    };\n\n    this.updateSprite(Options[actualPosition]());\n    this.state.logFunction(`<strong>${this.name}<strong> rotate</strong> now!`);\n  }\n}\n","export function getPokemonFromApi(pokemonId) {\n  return new Promise((resolve, reject) => {\n    const xml = new XMLHttpRequest();\n    xml.onload = eventObject => {\n      const {\n        currentTarget: { response: pokemon, status },\n      } = eventObject;\n      if (status >= 400) {\n        reject('this pokemon dont exist');\n      } else {\n        resolve(pokemon);\n      }\n    };\n    xml.open('GET', `https://pokeapi.co/api/v2/pokemon/${pokemonId}`);\n    xml.responseType = 'json';\n    xml.send();\n    // xml.onerror = reject(msj => Error(msj));\n  });\n}\n","import { bench } from './pokeBenchState';\n// recieve a name or id of a pokemon already catched and returns his benchState\n\nfunction getPokemonBluePrintReference(pokemonIdOrName) {\n  if (\n    !Object.entries(bench.bluePrint).filter(\n      ([name, { id }]) => id === pokemonIdOrName || name === pokemonIdOrName\n    )[0]\n  ) {\n    return;\n  }\n\n  const pokemonName = Object.entries(bench.bluePrint).filter(\n    ([name, { id }]) => id === pokemonIdOrName || name === pokemonIdOrName\n  )[0][0];\n\n  return bench.bluePrint[pokemonName];\n}\n\nfunction getRandomPokemonNumber() {\n  const randomPokemonId = Math.floor(Math.random() * 806 + 1);\n  return randomPokemonId;\n}\n\nexport { getPokemonBluePrintReference, getRandomPokemonNumber };\n","const landscapeState = {\n  myClick: false,\n  clickTarget: undefined,\n  offset: {},\n};\n\nexport { landscapeState };\n","import { landscape, body } from '../Selectors';\nimport { landscapeState } from './lanscapeState';\n\nfunction mouseIsAlive(e) {\n  if (landscapeState.myClick) {\n    landscapeState.clickTarget.style.left = `${e.clientX -\n      landscapeState.offset.x}px`;\n    landscapeState.clickTarget.style.top = `${e.clientY -\n      landscapeState.offset.y}px`;\n  }\n}\n\nfunction landscapeDndActivate() {\n  body.addEventListener('mousemove', mouseIsAlive);\n  landscape.dataset.notEmpty = true;\n}\n\nfunction mouseUp(e) {\n  const bigRect = landscape.getBoundingClientRect();\n  const obj = landscapeState.clickTarget;\n  const objOffset = landscapeState.offset;\n  const objRect = obj.getBoundingClientRect();\n\n  obj.style.left =\n    e.clientX - objOffset.x < bigRect.left\n      ? `${bigRect.left}px`\n      : obj.style.left;\n\n  obj.style.left =\n    objRect.right > bigRect.right\n      ? `${bigRect.right - objRect.width}px`\n      : obj.style.left;\n\n  obj.style.top =\n    e.clientY - objOffset.y < bigRect.top ? `${bigRect.top}px` : obj.style.top;\n\n  obj.style.top =\n    objRect.bottom > bigRect.bottom\n      ? `${bigRect.bottom - objRect.height}px`\n      : obj.style.top;\n\n  landscapeState.myClick = false;\n}\nfunction mouseDown(e) {\n  landscapeState.myClick = e.target.tagName !== 'BUTTON';\n  landscapeState.clickTarget = e.currentTarget;\n  landscapeState.offset = { x: e.offsetX, y: e.offsetY };\n}\n\nfunction pokemonInside(pokemon) {\n  pokemon.style.margin = '0';\n  pokemon.style.position = 'absolute';\n  pokemon.setAttribute('draggable', 'false');\n  pokemon.addEventListener('mousedown', mouseDown);\n  pokemon.addEventListener('mouseup', mouseUp);\n  landscape.dataset.notEmpty = true && landscapeDndActivate();\n}\n\nexport { pokemonInside };\n","import { pokemonInside } from './Landscape/insideLandscapeHandlers';\nimport textToBlackDiv from './pokeInfoText';\n\nfunction dragStart(e) {\n  e.currentTarget.classList.add('taken');\n}\nfunction dragEnd(e) {\n  e.currentTarget.classList.remove('taken');\n}\n\nfunction dragOver(e) {\n  e.preventDefault();\n}\nfunction dragEnter(e) {\n  e.preventDefault();\n}\nfunction onDrop(e) {\n  const pokemonDropped = document.querySelector('.taken');\n  this.append(pokemonDropped);\n  textToBlackDiv(\n    `<strong>${pokemonDropped.classList[1]}</strong> i choose you!`\n  );\n  pokemonInside(pokemonDropped);\n}\n\nfunction mouseIn(e) {\n  e.currentTarget\n    .querySelectorAll('button')\n    .forEach(button => button.classList.remove('oculto'));\n}\nfunction mouseOut(e) {\n  e.currentTarget\n    .querySelectorAll('button')\n    .forEach(button => button.classList.add('oculto'));\n}\n\nexport { dragStart, dragEnd, dragOver, dragEnter, onDrop, mouseIn, mouseOut };\n","import { bench } from './pokeBenchState';\nimport textToBlackDiv from './pokeInfoText';\nimport PokemonBluePrint from './PokemonBluePrint';\nimport PokemonForScreen from './PokemonForScreen';\nimport { getPokemonFromApi } from './xmlRequest';\nimport {\n  getPokemonBluePrintReference,\n  getRandomPokemonNumber,\n} from './pokeUtils';\n\nimport { CajaSeleccionaPokemon } from './Selectors';\n\nimport { dragStart, dragEnd, mouseIn, mouseOut } from './dragAndDropHandlers';\n\nfunction isFirsTimePokemonRequest(pokemonId) {\n  return !Object.entries(bench.bluePrint).some(\n    ([name, { id }]) => id === pokemonId || name === pokemonId\n  );\n}\n\nfunction createNewUniqueIdentifier(pokemonId) {\n  return `pkm${pokemonId}_${new Date().getTime()}`;\n}\n\nfunction createPrintableCopy(pokemonBluePrint) {\n  const newUniqueIdentifier = createNewUniqueIdentifier(pokemonBluePrint.id);\n  bench.onScreen[newUniqueIdentifier] = new PokemonForScreen(\n    pokemonBluePrint,\n    newUniqueIdentifier\n  );\n  return bench.onScreen[newUniqueIdentifier];\n}\n\nfunction UpdateLocalStorage(bluePrintReference) {\n  localStorage.setItem('professorStorage', JSON.stringify(bluePrintReference));\n}\n\nasync function createPokemonBlueprint(pokemonIdOrName) {\n  if (isFirsTimePokemonRequest(pokemonIdOrName)) {\n    await getPokemonFromApi(pokemonIdOrName)\n      .then(apiPokemonData => {\n        bench.bluePrint[apiPokemonData.name] = new PokemonBluePrint(\n          apiPokemonData\n        );\n      })\n      .catch(response => {\n        textToBlackDiv(\n          `<strong>Sorry...</strong> try whit a valid pokemon <strong>Name or a number</strong>`\n        );\n        throw Error(response);\n      });\n  }\n\n  const bluePrint = getPokemonBluePrintReference(pokemonIdOrName);\n  UpdateLocalStorage(bench.bluePrint);\n  return bluePrint;\n}\n\nfunction addPokemonDivListeners(div) {\n  div.addEventListener('dragstart', dragStart);\n  div.addEventListener('dragend', dragEnd);\n  div.addEventListener('mouseenter', mouseIn);\n  div.addEventListener('mouseleave', mouseOut);\n}\n\nasync function printPokemon(pokemonId) {\n  const id = pokemonId || getRandomPokemonNumber();\n  const blueprint = await createPokemonBlueprint(id);\n  if (!blueprint) {\n    return;\n  }\n  console.log(blueprint);\n  const printableCopy = createPrintableCopy(blueprint);\n  CajaSeleccionaPokemon.insertAdjacentHTML(\n    'afterbegin',\n    `<div draggable=\"true\" class=\"pokemon\"></div>`\n  );\n  console.log(bench);\n\n  const newPokemonDiv = CajaSeleccionaPokemon.querySelector('.pokemon');\n  addPokemonDivListeners(newPokemonDiv);\n  printableCopy.printSelf(newPokemonDiv);\n  textToBlackDiv(\n    `nice! we just catched a <strong>${printableCopy.name}</strong>`\n  );\n}\n\nexport { printPokemon };\n","import { landscape, btn, searchPokemon } from './Selectors';\n\nimport { printPokemon } from './printPokemon';\n\nimport { dragOver, dragEnter, onDrop } from './dragAndDropHandlers';\n\nconst test = e => {\n  const input = e.currentTarget.firstElementChild;\n  // console.log(input.value);\n};\n\nconst testClick = e => {\n  const input = e.currentTarget.firstElementChild;\n  if (e.target.dataset.item !== 'botonHuevo' || input.value === '') {\n    return;\n  }\n  const pokemonIdAuth = isNaN(parseInt(input.value))\n    ? input.value\n    : parseInt(input.value);\n  printPokemon(pokemonIdAuth);\n};\n\nfunction init() {\n  landscape.addEventListener('dragover', dragOver);\n  landscape.addEventListener('dragenter', dragEnter);\n  landscape.addEventListener('drop', onDrop);\n\n  btn.addEventListener('click', () => printPokemon());\n  searchPokemon.addEventListener('keyup', test);\n  searchPokemon.addEventListener('click', testClick);\n}\n\nexport { init };\n","import { init } from './JavaScript/eventListenersInitializer';\r\n\r\ninit();\r\n"]}